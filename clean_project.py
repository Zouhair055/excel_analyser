#!/usr/bin/env python3
"""
Script de nettoyage du projet Excel Analyzer
Supprime tous les fichiers inutiles et garde seulement le syst√®me √† r√®gles
"""

import os
import shutil
import glob
from datetime import datetime

def clean_project():
    """Nettoie le projet en supprimant tous les fichiers inutiles"""
    
    print("üßπ NETTOYAGE DU PROJET EXCEL ANALYZER")
    print("=" * 50)
    
    # Fichiers et dossiers √† supprimer
    files_to_remove = [
        # Scripts ML obsol√®tes
        "model_auto_remplissage/model.py",
        "model_auto_remplissage/model_entrainement.py",
        "model_auto_remplissage/Pr√©dicteur_ML.py",
        "model_auto_remplissage/Integration.py",
        "model_auto_remplissage/interface.py",
        "model_auto_remplissage/script.py",
        "model_auto_remplissage/smart_integration.py",
        "model_auto_remplissage/smart_rule_extractor.py",
        "model_auto_remplissage/train_simple.py",
        "model_auto_remplissage/training_pipeline.py",
        
        # Tests obsol√®tes
        "test_smart_rules.py",
        "training_advanced/train_with_progress.py",
        
        # Dossier script_clone complet (ancien comparateur)
        "script_clone/",
        
        # Fichiers de cache Python
        "model_auto_remplissage/__pycache__/",
        "src/__pycache__/",
        
        # Mod√®les ML (gard√©s dans models/ pour r√©f√©rence historique)
        # "model_auto_remplissage/models/*.joblib",
        # "model_auto_remplissage/models/metadata_*.json",
    ]
    
    # Fichiers √† garder absolument
    essential_files = [
        "src/main.py",
        "src/routes/excel.py",
        "src/routes/user.py", 
        "src/models/user.py",
        "src/static/index.html",
        "src/static/style.css",
        "src/static/script.js",
        "model_auto_remplissage/train_hybrid_system.py",  # Pour g√©n√©rer de nouvelles r√®gles
        "rules_corrected_*.json",  # Fichiers de r√®gles
        "requirements.txt",
        "README.md",
        "RESUME_EXECUTIF.md",
        "test_api.py",
        "test_rules_detection.py",
        "test_web_app.py",
        "verify_results.py",
        "clean_project.py"  # Ce script
    ]
    
    print("üìã Fichiers/dossiers √† supprimer :")
    removed_count = 0
    
    for item in files_to_remove:
        full_path = os.path.abspath(item)
        
        if os.path.exists(full_path):
            try:
                if os.path.isdir(full_path):
                    shutil.rmtree(full_path)
                    print(f"  üóÇÔ∏è  Dossier supprim√©: {item}")
                else:
                    os.remove(full_path)
                    print(f"  üìÑ Fichier supprim√©: {item}")
                removed_count += 1
            except Exception as e:
                print(f"  ‚ùå Erreur lors de la suppression de {item}: {e}")
        else:
            print(f"  ‚è≠Ô∏è  Inexistant: {item}")
    
    # Nettoyage des fichiers de cache suppl√©mentaires
    print("\nüßπ Nettoyage des fichiers de cache...")
    cache_patterns = [
        "**/__pycache__/",
        "**/*.pyc",
        "**/*.pyo",
        "**/Thumbs.db",
        "**/.DS_Store"
    ]
    
    for pattern in cache_patterns:
        for file_path in glob.glob(pattern, recursive=True):
            try:
                if os.path.isdir(file_path):
                    shutil.rmtree(file_path)
                else:
                    os.remove(file_path)
                print(f"  üóëÔ∏è  Cache supprim√©: {file_path}")
                removed_count += 1
            except Exception as e:
                print(f"  ‚ùå Erreur cache: {e}")
    
    print(f"\n‚úÖ Nettoyage termin√©: {removed_count} √©l√©ments supprim√©s")
    
    # V√©rifier les fichiers essentiels
    print("\nüîç V√©rification des fichiers essentiels...")
    missing_files = []
    
    for pattern in essential_files:
        if "*" in pattern:
            # Pattern avec wildcard
            matches = glob.glob(pattern)
            if not matches:
                missing_files.append(pattern)
        else:
            # Fichier sp√©cifique
            if not os.path.exists(pattern):
                missing_files.append(pattern)
    
    if missing_files:
        print("‚ö†Ô∏è  Fichiers essentiels manquants:")
        for file in missing_files:
            print(f"   - {file}")
    else:
        print("‚úÖ Tous les fichiers essentiels sont pr√©sents")
    
    return removed_count

def display_final_structure():
    """Affiche la structure finale du projet"""
    
    print("\n" + "=" * 50)
    print("üìÅ STRUCTURE FINALE DU PROJET")
    print("=" * 50)
    
    # Structure attendue
    expected_structure = {
        "src/": [
            "main.py",
            "routes/excel.py",
            "routes/user.py", 
            "models/user.py",
            "static/index.html",
            "static/style.css",
            "static/script.js",
            "database/app.db"
        ],
        "model_auto_remplissage/": [
            "train_hybrid_system.py",
            "training_data.xlsx"
        ],
        "uploads/": ["(fichiers de test)"],
        "processed/": ["(fichiers trait√©s)"],
        "": [
            "rules_corrected_*.json",
            "requirements.txt",
            "README.md",
            "RESUME_EXECUTIF.md"
        ]
    }
    
    for directory, files in expected_structure.items():
        dir_path = directory if directory else "."
        print(f"\nüìÇ {dir_path if directory else 'Racine'}")
        
        for file in files:
            if "*" in file:
                # Pattern
                matches = glob.glob(os.path.join(dir_path, file))
                if matches:
                    for match in matches:
                        print(f"   ‚úÖ {os.path.basename(match)}")
                else:
                    print(f"   ‚ùå {file} (non trouv√©)")
            else:
                file_path = os.path.join(dir_path, file)
                if os.path.exists(file_path):
                    print(f"   ‚úÖ {file}")
                else:
                    print(f"   ‚ö†Ô∏è  {file}")

if __name__ == "__main__":
    print("üöÄ D√âMARRAGE DU NETTOYAGE")
    print()
    
    # Confirmation
    response = input("‚ö†Ô∏è  Voulez-vous vraiment nettoyer le projet ? (y/N): ").strip().lower()
    
    if response in ['y', 'yes', 'oui']:
        removed = clean_project()
        display_final_structure()
        
        print("\n" + "=" * 50)
        print("üéâ NETTOYAGE TERMIN√â")
        print(f"üìä {removed} √©l√©ments supprim√©s")
        print("‚ú® Le projet est maintenant optimis√© pour le syst√®me √† r√®gles uniquement")
        print("\nüí° Prochaines √©tapes:")
        print("   1. Corriger la d√©tection des r√®gles dans src/routes/excel.py")
        print("   2. Supprimer les imports TensorFlow/ML")
        print("   3. Tester l'application")
        
    else:
        print("‚ùå Nettoyage annul√©")
